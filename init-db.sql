SELECT 'Iniciando la creaci√≥n de la base de datos y usuario...' AS mensaje;

DROP DATABASE IF EXISTS AulaDigital;
CREATE DATABASE AulaDigital;
DROP USER IF EXISTS 'user'@'%';
CREATE USER 'user'@'%' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON AulaDigital.* TO 'user'@'%';
FLUSH PRIVILEGES;

SELECT 'Base de datos y usuario creados correctamente' AS mensaje;


DROP DATABASE IF EXISTS AulaDigital;

-- CREATE DATABASE
CREATE DATABASE AulaDigital;

-- USE DATABASE
USE AulaDigital;

-- CREATE USERS
CREATE TABLE Usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombres VARCHAR(100) NOT NULL,
    apellidos VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL,
    rol VARCHAR(20) NOT NULL,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);

-- CREATE GRADOS
CREATE TABLE Grados (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);

-- CREATE SECCIONES
CREATE TABLE Secciones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);

-- CREATE CURSOS
CREATE TABLE Cursos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);

-- CREATE ASIGNACION DE MAESTRO CURSO
CREATE TABLE Asignacion_Maestro (
    id INT AUTO_INCREMENT PRIMARY KEY,
    maestroId INT,
    gradoId INT,
    seccionId INT,
    cursoId INT,
    anio INT,
    FOREIGN KEY (maestroId) REFERENCES Usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (gradoId) REFERENCES Grados(id) ON DELETE CASCADE,
    FOREIGN KEY (seccionId) REFERENCES Secciones(id) ON DELETE CASCADE,
    FOREIGN KEY (cursoId) REFERENCES Cursos(id) ON DELETE CASCADE,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);

-- CREATE ASIGNACION DE ESTUDIANTE
CREATE TABLE Asignacion_Estudiante (
    id INT AUTO_INCREMENT PRIMARY KEY,
    estudianteId INT,
    gradoId INT,
    seccionId INT,
    anio INT,
    FOREIGN KEY (estudianteId) REFERENCES Usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (gradoId) REFERENCES Grados(id) ON DELETE CASCADE,
    FOREIGN KEY (seccionId) REFERENCES Secciones(id) ON DELETE CASCADE,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);

-- CREATE ENCABEZADO DE ASISTENCIA
CREATE TABLE Asistencia_Encabezado (
    id INT AUTO_INCREMENT PRIMARY KEY,
    asignacionMaestroId INT,
    fecha DATE NOT NULL,
    bimestre VARCHAR(20) NOT NULL,
    FOREIGN KEY (asignacionMaestroId) REFERENCES Asignacion_Maestro(id) ON DELETE CASCADE,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);

-- CREATE ASISTENCIA
CREATE TABLE Asistencias (
    id INT AUTO_INCREMENT PRIMARY KEY,
    estudianteId INT,
    encabezadoId INT,
    asistio TINYINT NOT NULL DEFAULT 0,
    justificacion TINYINT NULL,
    FOREIGN KEY (estudianteId) REFERENCES Usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (encabezadoId) REFERENCES Asistencia_Encabezado(id) ON DELETE CASCADE,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);

-- CREATE TABLE DETAIL Tareas
DROP TABLE IF EXISTS Tareas;
CREATE TABLE Tareas(
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(250) NOT NULL,
    fechaLimite DATETIME NOT NULL,
    nota INT NOT NULL,
    estado TINYINT NULL DEFAULT 0,
    bimestre VARCHAR(20) NOT NULL,
    tipo_tarea VARCHAR(100) NULL,
    asignacionMaestroId INT NOT NULL,
    FOREIGN KEY (asignacionMaestroId) REFERENCES Asignacion_Maestro(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);

-- LA TABLA LE ASIGNA LA ACIVIDAD A LOS ALUMNOS
DROP TABLE IF EXISTS Tarea_Estudiante;
CREATE TABLE Tarea_Estudiante(
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    entregada INT NOT NULL DEFAULT 0,
    nota INT NULL,
    archivo LONGBLOB NULL,
    tipoArchivo VARCHAR(100) NULL,
    tareaId INT NOT NULL,
    estudianteId INT NOT NULL,
    FOREIGN KEY (tareaId) REFERENCES Tareas(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (estudianteId) REFERENCES Usuarios(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);

-- CREAR TABLA DE PREGUNTA
DROP TABLE IF EXISTS Preguntas;
CREATE TABLE Preguntas(
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    tipo_pregunta VARCHAR(100) NOT NULL,
    pregunta VARCHAR(100) NULL,
    respuesta1 VARCHAR(100) NULL,
    respuesta2 VARCHAR(100) NULL,
    respuesta3 VARCHAR(100) NULL,
    respuesta4 VARCHAR(100) NULL,
    correcta VARCHAR(100) NULL,
    punteo DECIMAL NULL,
    tareaId INT NOT NULL,
    FOREIGN KEY (tareaId) REFERENCES Tareas(id)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deletedAt DATETIME NULL
);
